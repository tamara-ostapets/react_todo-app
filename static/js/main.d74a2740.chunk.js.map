{"version":3,"sources":["components/InputField/InputField.jsx","types.js","components/Todo/Todo.jsx","components/TodoList/TodoList.jsx","components/Footer/Footer.jsx","App.js","index.js"],"names":["InputField","addNewTodo","useState","inputValue","setInputValue","onSubmit","e","preventDefault","newTodo","title","id","uuidv4","isCompleted","isBeingEdited","trim","type","value","onChange","target","className","placeholder","PropTypes","shape","string","isRequired","bool","Todo","todo","removeItem","toggleCompletedStatus","handleEditingTodo","handleEnter","handleEscape","initialValue","setInitialValue","useEffect","key","cn","completed","editing","checked","onDoubleClick","onClick","onBlur","onKeyDown","keyDownHandler","TodoList","todos","map","Footer","clearCompleted","handleFilter","todosInProgress","filter","handleFilterClick","arr","href","split","length","App","JSON","parse","localStorage","getItem","setValue","newValue","setItem","stringify","useLocalStorage","setTodos","allStatus","setAllStatus","setFilter","todosOnPage","setTodosOnPage","toggleAll","filterTodos","filtered","every","htmlFor","todoId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d74a2740.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport PropTypes from 'prop-types';\n\nexport const InputField = ({ addNewTodo }) => {\n  const [inputValue, setInputValue] = useState('');\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n\n    const newTodo = {\n      title: inputValue,\n      id: uuidv4(),\n      isCompleted: false,\n      isBeingEdited: false,\n    };\n\n    if (newTodo.title.trim()) {\n      addNewTodo(newTodo);\n    }\n\n    setInputValue('');\n  };\n\n  const onInput = (e) => {\n    if (e.target.value.trim()) {\n      setInputValue(e.target.value);\n    }\n  };\n\n  return (\n    <form\n      onSubmit={onSubmit}\n    >\n      <input\n        type=\"text\"\n        value={inputValue}\n        onChange={onInput}\n        className=\"new-todo\"\n        placeholder=\"What needs to be done?\"\n      />\n    </form>\n  );\n};\n\nInputField.propTypes = {\n  addNewTodo: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\n\nexport const TypeTodo = PropTypes.shape({\n  id: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  isCompleted: PropTypes.bool.isRequired,\n  isBeingEdited: PropTypes.bool.isRequired,\n});\n","import React, { useEffect, useState } from 'react';\nimport cn from 'classnames';\nimport PropTypes from 'prop-types';\nimport { TypeTodo } from '../../types';\n\nexport const Todo = ({\n  todo: { id, title, isCompleted, isBeingEdited },\n  removeItem,\n  toggleCompletedStatus,\n  handleEditingTodo,\n  handleEnter,\n  handleEscape,\n}) => {\n  const [inputValue, setInputValue] = useState('');\n  const [initialValue, setInitialValue] = useState('');\n\n  useEffect(() => {\n    setInitialValue(title);\n  }, []);\n\n  const keyDownHandler = (e) => {\n    if (e.key === 'Enter' && inputValue.trim()) {\n      handleEnter(id, inputValue);\n      setInitialValue(inputValue);\n    } else if (e.key === 'Escape') {\n      handleEscape(id, initialValue);\n    }\n  };\n\n  return (\n    <li\n      key={id}\n      className={cn({\n        completed: isCompleted,\n        editing: isBeingEdited,\n      })}\n\n    >\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          onChange={() => toggleCompletedStatus(id)}\n          checked={isCompleted}\n        />\n        <label\n          onDoubleClick={() => handleEditingTodo(id)}\n        >\n          {title}\n        </label>\n        <button\n          type=\"button\"\n          className=\"destroy\"\n          onClick={() => removeItem(id)}\n        />\n      </div>\n      <input\n        onBlur={(e) => {\n          const { value } = e.target;\n\n          if (value.trim()) {\n            handleEnter(id, value);\n          } else {\n            handleEscape(id);\n          }\n        }}\n        value={inputValue}\n        onChange={e => setInputValue(e.target.value)}\n        onKeyDown={e => keyDownHandler(e, inputValue)}\n        type=\"text\"\n        className=\"edit\"\n      />\n    </li>\n  );\n};\n\nTodo.propTypes = {\n  todo: TypeTodo.isRequired,\n  removeItem: PropTypes.func.isRequired,\n  toggleCompletedStatus: PropTypes.func.isRequired,\n  handleEditingTodo: PropTypes.func.isRequired,\n  handleEnter: PropTypes.func.isRequired,\n  handleEscape: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TypeTodo } from '../../types';\nimport { Todo } from '../Todo';\n\nexport const TodoList = ({\n  removeItem,\n  todos,\n  toggleCompletedStatus,\n  handleEditingTodo,\n  handleEnter,\n  handleEscape,\n}) => (\n  <ul className=\"todo-list\">\n    {todos.map(todo => (\n      <Todo\n        handleEscape={handleEscape}\n        key={todo.id}\n        removeItem={removeItem}\n        toggleCompletedStatus={toggleCompletedStatus}\n        handleEditingTodo={handleEditingTodo}\n        handleEnter={handleEnter}\n        todo={todo}\n      />\n    ))}\n  </ul>\n);\n\nTodoList.propTypes = {\n  removeItem: PropTypes.func.isRequired,\n  todos: PropTypes.arrayOf(TypeTodo).isRequired,\n  toggleCompletedStatus: PropTypes.func.isRequired,\n  handleEditingTodo: PropTypes.func.isRequired,\n  handleEnter: PropTypes.func.isRequired,\n  handleEscape: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TypeTodo } from '../../types';\n\nexport const Footer = ({\n  todos,\n  clearCompleted,\n  handleFilter,\n}) => {\n  const todosInProgress = todos.filter(todo => !todo.isCompleted);\n\n  const handleFilterClick = (e) => {\n    const arr = e.target.href.split('/');\n    let value = arr[arr.length - 1];\n\n    if (!value) {\n      value = 'all';\n    }\n\n    handleFilter(value);\n  };\n\n  return (\n    <footer className=\"footer\">\n      <span className=\"todo-count\">\n        {todosInProgress.length}\n        {' '}\n        items left\n      </span>\n\n      <ul\n        className=\"filters\"\n      >\n        <li>\n          <a\n            onClick={e => handleFilterClick(e)}\n            href=\"#/\"\n          >\n            All\n          </a>\n        </li>\n\n        <li>\n          <a\n            onClick={e => handleFilterClick(e)}\n            href=\"#/active\"\n          >\n            Active\n          </a>\n        </li>\n\n        <li>\n          <a\n            onClick={e => handleFilterClick(e)}\n            href=\"#/completed\"\n          >\n            Completed\n          </a>\n        </li>\n      </ul>\n\n      <button\n        type=\"button\"\n        className=\"clear-completed\"\n        onClick={clearCompleted}\n      >\n        Clear completed\n      </button>\n    </footer>\n  );\n};\n\nFooter.propTypes = {\n  todos: PropTypes.arrayOf(TypeTodo).isRequired,\n  clearCompleted: PropTypes.func.isRequired,\n  filter: PropTypes.string.isRequired,\n  handleFilter: PropTypes.func.isRequired,\n};\n","import React, { useEffect, useState } from 'react';\nimport { InputField } from './components/InputField';\nimport { TodoList } from './components/TodoList';\nimport { Footer } from './components/Footer';\n\nconst useLocalStorage = (key, initialValue) => {\n  const [value, setValue] = useState(() => {\n    try {\n      return JSON.parse(localStorage.getItem(key)) || initialValue;\n    } catch {\n      return initialValue;\n    }\n  });\n\n  const save = (newValue) => {\n    setValue(newValue);\n    localStorage.setItem(key, JSON.stringify(newValue));\n  };\n\n  return [value, save];\n};\n\nfunction App() {\n  const [todos, setTodos] = useLocalStorage('todos', []);\n  const [allStatus, setAllStatus] = useState(false);\n  const [filter, setFilter] = useState('all');\n  const [todosOnPage, setTodosOnPage] = useState([...todos]);\n\n  useEffect(() => {\n    setTodosOnPage([...todos]);\n  }, [todos]);\n\n  const addNewTodo = (newTodo) => {\n    setTodos([newTodo, ...todos]);\n  };\n\n  const toggleCompletedStatus = (todoId) => {\n    setTodos(todos.map((todo) => {\n      if (todo.id === todoId) {\n        return {\n          ...todo,\n          isCompleted: !todo.isCompleted,\n        };\n      }\n\n      return todo;\n    }));\n  };\n\n  const removeItem = (todoId) => {\n    setTodos(todos.filter(todo => todo.id !== todoId));\n  };\n\n  const clearCompleted = () => {\n    setTodos(todos.filter(todo => !todo.isCompleted));\n  };\n\n  const toggleAll = () => {\n    if (allStatus) {\n      setTodos(todos.map(todo => ({\n        ...todo,\n        isCompleted: false,\n      })));\n    } else {\n      setTodos(todos.map(todo => ({\n        ...todo,\n        isCompleted: true,\n      })));\n    }\n\n    setAllStatus(!allStatus);\n  };\n\n  const handleEditingTodo = (todoId) => {\n    setTodos(todos.map((todo) => {\n      if (todo.id === todoId) {\n        return {\n          ...todo,\n          isBeingEdited: true,\n        };\n      }\n\n      return todo;\n    }));\n  };\n\n  const handleEnter = (todoId, value) => {\n    setTodos(todos.map((todo) => {\n      if (todo.id === todoId) {\n        return {\n          ...todo,\n          isBeingEdited: false,\n          title: value,\n        };\n      }\n\n      return todo;\n    }));\n  };\n\n  const handleEscape = (todoId, value) => {\n    setTodos(todos.map((todo) => {\n      if (todo.id === todoId) {\n        return {\n          ...todo,\n          title: value,\n          isBeingEdited: false,\n        };\n      }\n\n      return todo;\n    }));\n  };\n\n  const handleFilter = (value) => {\n    switch (value) {\n      case ('active'):\n        setFilter('active');\n        break;\n      case ('completed'):\n        setFilter('completed');\n        break;\n      case ('all'):\n        setFilter('all');\n        break;\n      default:\n        return filter;\n    }\n\n    return filterTodos();\n  };\n\n  const filterTodos = () => {\n    let filtered = [...todos];\n\n    switch (filter) {\n      case ('active'):\n        filtered = filtered\n          .filter(todo => todo.isCompleted === false);\n        setTodosOnPage(filtered);\n\n        return todosOnPage;\n      case ('completed'):\n        filtered = filtered\n          .filter(todo => todo.isCompleted === true);\n        setTodosOnPage(filtered);\n\n        return todosOnPage;\n      case ('all'):\n        setTodosOnPage([...todos]);\n\n        return todosOnPage;\n\n      default:\n        return todosOnPage;\n    }\n  };\n\n  return (\n    <section className=\"todoapp\">\n      <header className=\"header\">\n        <h1>todos</h1>\n\n        <InputField addNewTodo={addNewTodo} />\n      </header>\n\n      <section className=\"main\">\n        {(todos.length > 0 && todos.every(todo => todo.isCompleted === true))\n          ? (\n            <input\n              checked\n              type=\"checkbox\"\n              id=\"toggle-all\"\n              className=\"toggle-all\"\n              onChange={toggleAll}\n            />\n          )\n          : (\n            <input\n              type=\"checkbox\"\n              id=\"toggle-all\"\n              className=\"toggle-all\"\n              onChange={toggleAll}\n            />\n          )\n        }\n        <label htmlFor=\"toggle-all\">Mark all as complete</label>\n\n        <TodoList\n          filter={filter}\n          handleEnter={handleEnter}\n          handleEditingTodo={handleEditingTodo}\n          removeItem={removeItem}\n          toggleCompletedStatus={toggleCompletedStatus}\n          todos={todosOnPage}\n          handleEscape={handleEscape}\n        />\n      </section>\n\n      {(todos.length >= 1) && (\n        <Footer\n          filter={filter}\n          clearCompleted={clearCompleted}\n          todos={todos}\n          handleFilter={handleFilter}\n        />\n      )}\n    </section>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}