{"version":3,"sources":["components/InputField/InputField.jsx","components/TodoList/TodoList.jsx","types.js","components/Footer/Footer.jsx","App.js","index.js"],"names":["InputField","addNewTodo","useState","inputValue","setInputValue","onSubmit","e","preventDefault","newTodo","title","id","uuidv4","isCompleted","isBeingEdited","type","value","onChange","target","trim","className","placeholder","TodoList","PropTypes","shape","string","isRequired","bool","removeItem","todos","toggleCompletedStatus","map","todo","key","cn","view","completed","editing","onClick","Footer","clearCompleted","todosInProgress","filter","length","href","App","setTodos","allStatus","setAllStatus","htmlFor","todoId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.463eef64.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport PropTypes from 'prop-types';\n\nexport const InputField = ({ addNewTodo }) => {\n  const [inputValue, setInputValue] = useState('');\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n\n    const newTodo = {\n      title: inputValue,\n      id: uuidv4(),\n      isCompleted: false,\n      isBeingEdited: false,\n    };\n\n    addNewTodo(newTodo);\n    setInputValue('');\n  };\n\n  const onInput = (e) => {\n    if (e.target.value.trim()) {\n      setInputValue(e.target.value);\n    }\n  };\n\n  return (\n    <form\n      onSubmit={onSubmit}\n    >\n      <input\n        type=\"text\"\n        value={inputValue}\n        onChange={onInput}\n        className=\"new-todo\"\n        placeholder=\"What needs to be done?\"\n      />\n    </form>\n  );\n};\n\nInputField.propTypes = {\n  addNewTodo: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport cn from 'classnames';\nimport PropTypes from 'prop-types';\nimport { TypeTodo } from '../../types';\n\nexport const TodoList = ({\n  removeItem,\n  todos,\n  toggleCompletedStatus,\n}) => (\n  <ul className=\"todo-list\">\n    {todos.map(todo => (\n      <li key={todo.id}>\n        <div className={cn({\n          view: !todo.isCompleted,\n          completed: todo.isCompleted,\n          editing: todo.isBeingEdited,\n        })}\n        >\n          <input\n            type=\"checkbox\"\n            className=\"toggle\"\n            onChange={() => toggleCompletedStatus(todo.id)}\n          />\n          <label>\n            {todo.title}\n          </label>\n          <button\n            type=\"button\"\n            className=\"destroy\"\n            onClick={() => removeItem(todo.id)}\n          />\n        </div>\n        <input type=\"text\" className=\"edit\" />\n      </li>\n    ))}\n  </ul>\n);\n\nTodoList.propTypes = {\n  removeItem: PropTypes.func.isRequired,\n  todos: PropTypes.arrayOf(TypeTodo).isRequired,\n  toggleCompletedStatus: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\n\nexport const TypeTodo = PropTypes.shape({\n  id: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  isCompleted: PropTypes.bool.isRequired,\n  isBeingEdited: PropTypes.bool.isRequired,\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TypeTodo } from '../../types';\n\nexport const Footer = ({ todos, clearCompleted }) => {\n  const todosInProgress = todos.filter(todo => !todo.isCompleted);\n\n  return (\n    (\n      <footer className=\"footer\">\n        <span className=\"todo-count\">\n          {todosInProgress.length}\n          {' '}\n          items left\n        </span>\n\n        <ul className=\"filters\">\n          <li>\n            <a href=\"#/\" className=\"selected\">All</a>\n          </li>\n\n          <li>\n            <a href=\"#/active\">Active</a>\n          </li>\n\n          <li>\n            <a href=\"#/completed\">Completed</a>\n          </li>\n        </ul>\n\n        <button\n          type=\"button\"\n          className=\"clear-completed\"\n          onClick={clearCompleted}\n        >\n          Clear completed\n        </button>\n      </footer>\n    )\n  );\n};\n\nFooter.propTypes = {\n  todos: PropTypes.arrayOf(TypeTodo).isRequired,\n  clearCompleted: PropTypes.func.isRequired,\n};\n","import React, { useState } from 'react';\nimport { InputField } from './components/InputField';\nimport { TodoList } from './components/TodoList';\nimport { Footer } from './components/Footer';\n\nfunction App() {\n  const [todos, setTodos] = useState([]);\n  const [allStatus, setAllStatus] = useState(false);\n\n  const addNewTodo = (newTodo) => {\n    setTodos([newTodo, ...todos]);\n  };\n\n  const toggleCompletedStatus = (todoId) => {\n    setTodos(todos.map((todo) => {\n      if (todo.id === todoId) {\n        return {\n          ...todo,\n          isCompleted: !todo.isCompleted,\n        };\n      }\n\n      return todo;\n    }));\n  };\n\n  const removeItem = (todoId) => {\n    setTodos(todos.filter(todo => todo.id !== todoId));\n  };\n\n  const clearCompleted = () => {\n    setTodos(todos.filter(todo => !todo.isCompleted));\n  };\n\n  const toggleAll = () => {\n    if (allStatus) {\n      setTodos(todos.map(todo => ({\n        ...todo,\n        isCompleted: false,\n      })));\n    } else {\n      setTodos(todos.map(todo => ({\n        ...todo,\n        isCompleted: true,\n      })));\n    }\n\n    setAllStatus(!allStatus);\n  };\n\n  return (\n    <section className=\"todoapp\">\n      <header className=\"header\">\n        <h1>todos</h1>\n\n        <InputField addNewTodo={addNewTodo} />\n      </header>\n\n      <section className=\"main\">\n        <input\n          type=\"checkbox\"\n          id=\"toggle-all\"\n          className=\"toggle-all\"\n          onChange={toggleAll}\n        />\n        <label htmlFor=\"toggle-all\">Mark all as complete</label>\n\n        <TodoList\n          removeItem={removeItem}\n          toggleCompletedStatus={toggleCompletedStatus}\n          todos={todos}\n        />\n      </section>\n\n      <Footer clearCompleted={clearCompleted} todos={todos} />\n    </section>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}