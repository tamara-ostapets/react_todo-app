{"version":3,"sources":["components/InputField/InputField.jsx","types.js","components/Todo/Todo.jsx","components/TodoList/TodoList.jsx","components/Footer/Footer.jsx","App.js","index.js"],"names":["InputField","addNewTodo","useState","inputValue","setInputValue","onSubmit","e","preventDefault","newTodo","title","id","uuidv4","completed","isBeingEdited","trim","type","value","onChange","target","className","placeholder","PropTypes","shape","string","isRequired","bool","Todo","todo","removeItem","toggleCompletedStatus","handleEditingTodo","handleEditedTodo","todoTitle","setTodoTitle","key","cn","editing","checked","onDoubleClick","onClick","onBlur","newTitle","onKeyDown","TodoList","todos","map","Footer","clearCompleted","handleFilter","todosInProgress","filter","onClickHandleFilter","length","href","App","initialValue","JSON","parse","localStorage","getItem","setValue","newValue","setItem","stringify","useLocalStorage","setTodos","allStatus","setAllStatus","setFilter","filteredTodos","useMemo","todosList","getTodos","toggleAll","every","htmlFor","todoId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7fc88062.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport PropTypes from 'prop-types';\n\nexport const InputField = ({ addNewTodo }) => {\n  const [inputValue, setInputValue] = useState('');\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n\n    const newTodo = {\n      title: inputValue,\n      id: uuidv4(),\n      completed: false,\n      isBeingEdited: false,\n    };\n\n    if (newTodo.title.trim()) {\n      addNewTodo(newTodo);\n    }\n\n    setInputValue('');\n  };\n\n  const onInput = (e) => {\n    if (e.target.value.trim()) {\n      setInputValue(e.target.value);\n    }\n  };\n\n  return (\n    <form\n      onSubmit={onSubmit}\n    >\n      <input\n        type=\"text\"\n        value={inputValue}\n        onChange={onInput}\n        className=\"new-todo\"\n        placeholder=\"What needs to be done?\"\n      />\n    </form>\n  );\n};\n\nInputField.propTypes = {\n  addNewTodo: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\n\nexport const TypeTodo = PropTypes.shape({\n  id: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  completed: PropTypes.bool.isRequired,\n  isBeingEdited: PropTypes.bool.isRequired,\n});\n","import React, { useState } from 'react';\nimport cn from 'classnames';\nimport PropTypes from 'prop-types';\nimport { TypeTodo } from '../../types';\n\nexport const Todo = ({\n  todo: { id, title, completed, isBeingEdited },\n  removeItem,\n  toggleCompletedStatus,\n  handleEditingTodo,\n  handleEditedTodo,\n}) => {\n  const [todoTitle, setTodoTitle] = useState('');\n\n  const keyDownHandler = (e) => {\n    if (e.key === 'Enter' && todoTitle.trim()) {\n      handleEditedTodo(id, todoTitle);\n    } else if (e.key === 'Escape') {\n      setTodoTitle(title);\n      handleEditedTodo(id, title);\n    }\n  };\n\n  const handleBlur = (newTitle, todoId) => {\n    handleEditedTodo(todoId, newTitle);\n  };\n\n  return (\n    <li\n      key={id}\n      className={cn({\n        completed,\n        editing: isBeingEdited,\n      })}\n\n    >\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          onChange={() => toggleCompletedStatus(id)}\n          checked={completed}\n        />\n        <label\n          onDoubleClick={() => {\n            handleEditingTodo(id);\n          }}\n        >\n          {title}\n        </label>\n        <button\n          type=\"button\"\n          className=\"destroy\"\n          onClick={() => removeItem(id)}\n        />\n      </div>\n      <input\n        onBlur={e => handleBlur(e.target.value, id)}\n        value={todoTitle}\n        onChange={(e) => {\n          setTodoTitle(e.target.value);\n        }}\n        onKeyDown={keyDownHandler}\n        type=\"text\"\n        className=\"edit\"\n      />\n    </li>\n  );\n};\n\nTodo.propTypes = {\n  todo: TypeTodo.isRequired,\n  removeItem: PropTypes.func.isRequired,\n  toggleCompletedStatus: PropTypes.func.isRequired,\n  handleEditingTodo: PropTypes.func.isRequired,\n  handleEditedTodo: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TypeTodo } from '../../types';\nimport { Todo } from '../Todo';\n\nexport const TodoList = ({\n  removeItem,\n  todos,\n  toggleCompletedStatus,\n  handleEditingTodo,\n  handleEditedTodo,\n}) => (\n  <ul className=\"todo-list\">\n    {todos.map(todo => (\n      <Todo\n        key={todo.id}\n        removeItem={removeItem}\n        toggleCompletedStatus={toggleCompletedStatus}\n        handleEditingTodo={handleEditingTodo}\n        handleEditedTodo={handleEditedTodo}\n        todo={todo}\n      />\n    ))}\n  </ul>\n);\n\nTodoList.propTypes = {\n  removeItem: PropTypes.func.isRequired,\n  todos: PropTypes.arrayOf(TypeTodo).isRequired,\n  toggleCompletedStatus: PropTypes.func.isRequired,\n  handleEditingTodo: PropTypes.func.isRequired,\n  handleEditedTodo: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TypeTodo } from '../../types';\n\nexport const Footer = ({\n  todos,\n  clearCompleted,\n  handleFilter,\n}) => {\n  const todosInProgress = todos.filter(todo => !todo.completed);\n\n  const onClickHandleFilter = (filter) => {\n    handleFilter(filter);\n  };\n\n  return (\n    <footer className=\"footer\">\n      <span className=\"todo-count\">\n        {todosInProgress.length}\n        {' '}\n        items left\n      </span>\n\n      <ul\n        className=\"filters\"\n      >\n        <li>\n          <a\n            onClick={() => onClickHandleFilter('all')}\n            href=\"#/\"\n          >\n            All\n          </a>\n        </li>\n\n        <li>\n          <a\n            onClick={() => onClickHandleFilter('active')}\n            href=\"#/active\"\n          >\n            Active\n          </a>\n        </li>\n\n        <li>\n          <a\n            onClick={() => onClickHandleFilter('completed')}\n            href=\"#/completed\"\n          >\n            Completed\n          </a>\n        </li>\n      </ul>\n\n      <button\n        type=\"button\"\n        className=\"clear-completed\"\n        onClick={clearCompleted}\n      >\n        Clear completed\n      </button>\n    </footer>\n  );\n};\n\nFooter.propTypes = {\n  todos: PropTypes.arrayOf(TypeTodo).isRequired,\n  clearCompleted: PropTypes.func.isRequired,\n  handleFilter: PropTypes.func.isRequired,\n};\n","import React, { useState, useMemo } from 'react';\nimport { InputField } from './components/InputField';\nimport { TodoList } from './components/TodoList';\nimport { Footer } from './components/Footer';\n\nconst useLocalStorage = (key, initialValue) => {\n  const [value, setValue] = useState(() => {\n    try {\n      return JSON.parse(localStorage.getItem(key)) || initialValue;\n    } catch {\n      return initialValue;\n    }\n  });\n\n  const saveValue = (newValue) => {\n    setValue(newValue);\n    localStorage.setItem(key, JSON.stringify(newValue));\n  };\n\n  return [value, saveValue];\n};\n\nfunction App() {\n  const [todos, setTodos] = useLocalStorage('todos', []);\n  const [allStatus, setAllStatus] = useState(false);\n  const [filter, setFilter] = useState('all');\n\n  const getTodos = (todosList) => {\n    switch (filter) {\n      case ('active'):\n        return todosList.filter(todo => todo.completed === false);\n\n      case ('completed'):\n        return todosList.filter(todo => todo.completed === true);\n\n      default:\n        return todosList;\n    }\n  };\n\n  const filteredTodos = useMemo(() => getTodos(todos), [todos, filter]);\n\n  const addNewTodo = (newTodo) => {\n    setTodos([newTodo, ...todos]);\n  };\n\n  const toggleCompletedStatus = (todoId) => {\n    setTodos(todos.map((todo) => {\n      if (todo.id === todoId) {\n        return {\n          ...todo,\n          completed: !todo.completed,\n        };\n      }\n\n      return todo;\n    }));\n  };\n\n  const removeItem = (todoId) => {\n    setTodos(todos.filter(todo => todo.id !== todoId));\n  };\n\n  const clearCompleted = () => {\n    setTodos(todos.filter(todo => !todo.completed));\n  };\n\n  const toggleAll = () => {\n    if (allStatus) {\n      setTodos(todos.map(todo => ({\n        ...todo,\n        completed: false,\n      })));\n    } else {\n      setTodos(todos.map(todo => ({\n        ...todo,\n        completed: true,\n      })));\n    }\n\n    setAllStatus(!allStatus);\n  };\n\n  const handleEditingTodo = (todoId) => {\n    setTodos(todos.map((todo) => {\n      if (todo.id === todoId) {\n        return {\n          ...todo,\n          isBeingEdited: true,\n        };\n      }\n\n      return {\n        ...todo,\n        isBeingEdited: false,\n      };\n    }));\n  };\n\n  const handleEditedTodo = (todoId, title) => {\n    if (title.trim()) {\n      setTodos(todos.map((todo) => {\n        if (todo.id === todoId) {\n          return {\n            ...todo,\n            isBeingEdited: false,\n            title,\n          };\n        }\n\n        return todo;\n      }));\n\n      return todos;\n    }\n\n    return todos;\n  };\n\n  const handleFilter = (value) => {\n    setFilter(value);\n  };\n\n  return (\n    <section className=\"todoapp\">\n      <header className=\"header\">\n        <h1>todos</h1>\n\n        <InputField addNewTodo={addNewTodo} />\n      </header>\n\n      <section className=\"main\">\n        {todos.length === 0 && (<></>)}\n        {(todos.length > 0 && todos.every(todo => todo.completed === true)) && (\n          <>\n            <input\n              checked\n              type=\"checkbox\"\n              id=\"toggle-all\"\n              className=\"toggle-all\"\n              onChange={toggleAll}\n              value={allStatus}\n            />\n            <label htmlFor=\"toggle-all\">Mark all as complete</label>\n          </>\n        ) }\n        {(todos.length > 0 && !todos\n          .every(todo => todo.completed === true))\n          && (\n            <>\n              <input\n                type=\"checkbox\"\n                id=\"toggle-all\"\n                className=\"toggle-all\"\n                onChange={toggleAll}\n                value={allStatus}\n              />\n              <label htmlFor=\"toggle-all\">Mark all as complete</label>\n            </>\n          )\n        }\n\n        <TodoList\n          filter={filter}\n          handleEditedTodo={handleEditedTodo}\n          handleEditingTodo={handleEditingTodo}\n          removeItem={removeItem}\n          toggleCompletedStatus={toggleCompletedStatus}\n          todos={filteredTodos}\n        />\n      </section>\n\n      {(todos.length > 0) && (\n        <Footer\n          clearCompleted={clearCompleted}\n          todos={todos}\n          handleFilter={handleFilter}\n        />\n      )}\n    </section>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}